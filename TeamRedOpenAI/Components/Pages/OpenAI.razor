@page "/openai"
@rendermode InteractiveServer
@inject Microsoft.Extensions.Configuration.IConfiguration _config

<PageTitle>OpenAI</PageTitle>

<h3>OpenAI Query</h3>

<input placeholder="Input query" @bind="newQuery" />
<button class="btn btn-primary" @onclick="SemanticKernelClient">Send Request</button>

<br />

<h4>Server response:</h4> <p>@serverResponse</p>


@code {
	@using Microsoft.SemanticKernel;
	@using Microsoft.SemanticKernel.Connectors.OpenAI;
	// @using Azure.Identity;

	public string? newQuery;
	public string? serverResponse;

	private async Task SemanticKernelClient()
	{
		// for deployment
		string deploymentName = _config["DEPLOYMENT_NAME"];
		string endpoint = _config["ENDPOINT"];
		string apiKey = _config["API_KEY"];
		string modelId = _config["MODEL_ID"];


		var builder = Kernel.CreateBuilder();
		builder.Services.AddAzureOpenAIChatCompletion(
			deploymentName: deploymentName,
			endpoint: endpoint,
			apiKey: apiKey,
			modelId: modelId
		);


		// option with Azure Identity
		// var kernel = Kernel.CreateBuilder()
		// 	.AddAzureOpenAIChatCompletion(
		// 		deploymentName: deploymentName,
		// 		endpoint: endpoint,
		// 		credentials: new DefaultAzureCredential()
		// 	)
		// 	.Build();

		var kernel = builder.Build();

		var prompt = @"{{$input}} " + newQuery;

		var summarize = kernel.CreateFunctionFromPrompt(prompt, executionSettings: new OpenAIPromptExecutionSettings { MaxTokens = 100, Temperature = 0.2 });
		
		var result = await kernel.InvokeAsync(summarize);

		serverResponse = result.ToString();
	}
}